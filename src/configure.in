dnl Process this file with autoconf to produce a configure script.
dnl
dnl configure.in
dnl

AC_REVISION($Revision: 1.20 $)
AC_INIT(vbs.h)		
AC_CONFIG_HEADER(config.h)

#############################################################################
#
#	The purpose of the configure script is to determine the following
#	for the Makefile: compiler, flags, lex, yacc, and libs.
#
#############################################################################

dnl **** Command-line arguments ****

AC_ARG_ENABLE(debug,
	[  --disable-debug         Compile without debugging],
	[debug=no],[debug=yes])

AC_ARG_WITH(template_depth,
	[  --with-template_depth   Template depth (--with-template_depth=n)],
	[template_depth="$withval"])

AC_ARG_WITH(vcdfile,
	[  --with-vcdfile          Default VCD output filename (--with-vcdfile="vbs.dmp")],
	[vcdfile="$withval"],[vcdfile="vbs.dmp"])

AC_ARG_WITH(vcdver,
	[  --with-vcdver           Version string used in VCD output file],
	[vcdver="$withval"],[vcdver="\tVBS Value Change Dump (VCD) v1.0"])

AC_ARG_WITH(vppprog,
	[  --with-vppprog          Compile without preprocessor support (default is "vpp")],
	[vppprog="$withval"],[vppprog="vpp"])

AC_ARG_WITH(vppdir,
	[  --with-vppdir           Preproccesor directory (--with-vppdir=dir)],
	[vppdir="$withval"])

AC_DEFINE_UNQUOTED(VCDFILEDFLT, "\"$vcdfile\"")
AC_DEFINE_UNQUOTED(VCDVERSION, "$vcdver")

if test "$vppprog" = no
then
	vppprog=
else
	if test "$vppprog" = yes
	then
		vppprog="vpp"
	fi
fi

if test -n "$vppprog"
then
	AC_DEFINE_UNQUOTED(VERILOGVPP_PROG, "$vppprog")
fi

if test -n "$vppdir"
then
	AC_DEFINE_UNQUOTED(VERILOGVPP_DIR, "$vppdir")
fi

dnl **** System verification ****

dnl Define the C compiler.
AC_PROG_CC
AC_PROG_CPP

if test "${GCC}" = yes
then
	CFLAGS="$CFLAGS -ansi -pedantic -Wall"

	OLDCFLAGS="$CFLAGS"
	CFLAGS="$CFLAGS -Werror -fPIC"
	AC_CACHE_CHECK(
		[whether $CC accepts -fPIC],
		ac_cv_cc_works_with_fpic,
		AC_TRY_COMPILE([], [],
			ac_cv_cc_works_with_fpic=yes,
			ac_cv_cc_works_with_fpic=no))
	CFLAGS="$OLDCFLAGS"
	if test "$ac_cv_cc_works_with_fpic" = yes
	then
		CFLAGS="$CFLAGS -fPIC"
	fi
fi

dnl Define the C++ compiler.
AC_PROG_CXX
AC_PROG_CXXCPP

if test "${GXX}" = yes
then
	dnl Change to c++ for this test.
	AC_LANG_SAVE
	AC_LANG_CPLUSPLUS

	CXXFLAGS="$CXXFLAGS -ansi -pedantic -Wall"

	OLDCXXFLAGS="$CXXFLAGS"
	CXXFLAGS="$CXXFLAGS -Werror -fPIC"
	AC_CACHE_CHECK(
		[whether $CXX accepts -fPIC],
		ac_cv_cxx_works_with_fpic,
		AC_TRY_COMPILE([], [],
			ac_cv_cxx_works_with_fpic=yes,
			ac_cv_cxx_works_with_fpic=no))
	CXXFLAGS="$OLDCXXFLAGS"
	if test "$ac_cv_cxx_works_with_fpic" = yes
	then
		CXXFLAGS="$CXXFLAGS -fPIC"
	fi

	AC_CACHE_CHECK(
		[whether $CXX needs -frepo],
		ac_cv_need_frepo,
		AC_TRY_RUN(
			[
			int
			main()
				{
#if __GNUC__ == 2 && __GNUC_MINOR__ <= 7
				return 0;
#else
				return 1;
#endif
				}
			],
			ac_cv_need_frepo=yes,
			ac_cv_need_frepo=no,
			ac_cv_need_frepo=no))
	if test "$ac_cv_need_frepo" = yes
	then
		CXXFLAGS="$CXXFLAGS -D_G_NO_EXTERN_TEMPLATES -frepo"
	fi

	AC_CHECK_HEADERS(sstream,[],
		[
		echo "// DO NOT MODIFY!  This file is generated." > sstream
		echo "#ifndef __SSTREAM" >> sstream
		echo "#define __SSTREAM" >> sstream
		echo "#include <string>" >> sstream
		echo "#include <strstream>" >> sstream
		echo "namespace std" >> sstream
		echo "  {" >> sstream
		echo "    class stringstream : public strstream" >> sstream
		echo "      {" >> sstream
		echo "      public:" >> sstream
		echo "        stringstream() : strstream() { }" >> sstream
		echo "        virtual ~stringstream() { }" >> sstream
		echo "        string str()" >> sstream
		echo "          {" >> sstream
		echo "            *this << '\0';" >> sstream
		echo "            char *tmp = strstream::str();" >> sstream
		echo "            string retval(tmp);" >> sstream
		echo "            strstream::freeze(0);" >> sstream
		echo "            return retval;" >> sstream
		echo "          }" >> sstream
		echo "      };" >> sstream
		echo "  }" >> sstream
		echo "#endif // __SSTREAM" >> sstream
		])

	dnl Apply template depth parameter if asked to do so.
	if test -n "${template_depth}"
	then
		CXXFLAGS="$CXXFLAGS -ftemplate-depth=${template_depth}"
	fi

	dnl Change back to cc for the rest of configure.
	AC_LANG_RESTORE
fi

dnl System tools.
AC_CHECK_PROGS(COMPRESS, bzip2 gzip compress, compress)
AC_PROG_INSTALL
AC_PROG_RANLIB
AC_PROG_MAKE_SET

dnl Try to support as many scripting languages as possible.
AC_CHECK_PROGS(SWIG, swig)
if test "$SWIG" = swig
then
	dnl Guile support.
	AC_CHECK_HEADERS(libguile.h)
	if test "$ac_cv_header_libguile_h" = yes
	then
		echo "// Do not edit!" > vbs_guile.i
		echo "// This file is generated by configure..." >> vbs_guile.i
		echo "%module vbs" >> vbs_guile.i
		echo "%{" >> vbs_guile.i
		echo "%include \"guile/guilemain.i\"" >> vbs_guile.i
		echo "%}" >> vbs_guile.i
		echo "%include \"swig/vbs_swig.i\"" >> vbs_guile.i
		echo "// End of file." >> vbs_guile.i
		GUILE_LD="$CXX `guile-config link`"
	fi

	dnl TCL support.
	AC_CHECK_HEADERS(tcl.h)
	if test "$ac_cv_header_tcl_h" = yes
	then
		AC_CHECK_LIB(tcl, Tcl_Main)
		AC_CHECK_LIB(tcl8, Tcl_Main)
		AC_CHECK_LIB(tcl8.2, Tcl_Main)
		echo "// Do not edit!" > vbs_tcl.i
		echo "// This file is generated by configure..." >> vbs_tcl.i
		echo "%module vbs" >> vbs_tcl.i
		echo "%{" >> vbs_tcl.i
		echo "// No Tcl specific code needed." >> vbs_tcl.i
		echo "%}" >> vbs_tcl.i
		echo "%include \"swig/vbs_swig.i\"" >> vbs_tcl.i
		echo "// End of file." >> vbs_tcl.i
		SRCS_TCL=vbs_tcl.cc
	fi

	dnl Perl support.
	AC_CHECK_PROGS(PERL, perl)
	if test "$PERL" = perl
	then
		PERL5DIR=`($PERL -e 'use Config; print $Config{archlib};') 2>/dev/null`
		if test -r ${PERL5DIR}/CORE/perl.h
		then
			echo "// Do not edit!" > vbs_perl.i
			echo "// This file is generated by configure..." >> vbs_perl.i
			echo "%module vbs" >> vbs_perl.i
			echo "%{" >> vbs_perl.i
			echo "#include <csetjmp>" >> vbs_perl.i
			echo "%}" >> vbs_perl.i
			echo "%include \"swig/vbs_swig.i\"" >> vbs_perl.i
			echo "// End of file." >> vbs_perl.i
			SRCS_PERL=vbs_perl.cc
			PERLDEFS="-I${PERL5DIR}/CORE -Dexplicit="
			PERLLIBS="-L${PERL5DIR}/CORE -lperl"
			if test "${GXX}" = yes
			then
				PERLDEFS="-g -O2 $PERLDEFS -Wall"
			fi
			if test "$ac_cv_cxx_works_with_fpic" = yes
			then
				PERLDEFS="$PERLDEFS -fPIC"
			fi
		fi
	fi
fi

AC_SUBST(SRCS_TCL)
AC_SUBST(SRCS_PERL)
AC_SUBST(GUILE_LD)
AC_SUBST(PERLDEFS)
AC_SUBST(PERLLIBS)

dnl Make sure the yacc generator can produce correct output files.
AC_PROG_YACC

dnl Any lexer should work.
AC_PROG_LEX
AC_DECL_YYTEXT

dnl Only check if pre-processor is enabled.
if test "$vppprog"
then
	dnl We have multiple stages which uses fork.
	AC_CHECK_HEADERS(unistd.h)
	if test "$ac_cv_header_unistd_h" = no
	then
		AC_MSG_ERROR([unistd.h not found, POSIX.1 required.])
	fi

	AC_CHECK_FUNCS(fork stat)
	if test "$ac_cv_func_fork" = no
	then
		AC_MSG_ERROR([fork() not found, POSIX.1 required.])
	fi
	if test "$ac_cv_func_stat" = no
	then
		AC_MSG_ERROR([stat() not found, POSIX.1 required.])
	fi
fi

dnl We use getopt to parse the command line.
AC_CHECK_HEADERS(getopt.h)
AC_CHECK_FUNCS(getopt getopt_long)

dnl Automatically detect compression library.
AC_CHECK_HEADERS(zlib.h)
if test "$ac_cv_header_zlib_h" = no
then
	AC_WARN([zlib.h not found, disabling compression support.])
else
	AC_CHECK_LIB(z,gzopen)
	if test "$ac_cv_lib_z_gzopen" = no
	then
		AC_WARN([libz.a|so not found, disabling compression support.])
	fi
fi

AC_LANG_SAVE
AC_LANG_CPLUSPLUS
dnl See if getopt is prototyped in unistd.h.
AC_CACHE_CHECK(
	[whether getopt is prototyped in unistd.h],
	ac_cv_have_proto_getopt,
	AC_TRY_COMPILE(
		[#include <unistd.h>],
		[getopt(0, 0, 0)],
		ac_cv_have_proto_getopt=yes,
		ac_cv_have_proto_getopt=no))
if test "$ac_cv_have_proto_getopt" = yes
then
	AC_DEFINE(HAVE_PROTO_GETOPT)
fi
AC_LANG_RESTORE

if test "$debug" = yes
then
	CFLAGS="$CFLAGS -DVBS_DEBUG"
	CXXFLAGS="$CXXFLAGS -DVBS_DEBUG"
fi

dnl **** Generate output files ****

AC_OUTPUT([
Makefile
])

echo "Configure finished."
echo
echo "Run one of the following commands:"
	echo "    'make vbs' ......... Compile VBS simulator"
if test -n "$GUILE_LD"
then
	echo "    'make vbs-guile' ... Compile Guile script program"
fi
if test -n "$SRCS_PERL"
then
	echo "    'make vbs.so' ...... Library for Perl scripting"
fi
if test -n "$SRCS_TCL"
then
	echo "    'make libvbs.so' ... Library for TCL scripting"
fi
	echo "    'make libvbs.a' .... Compile VBS static library only"
echo


dnl Local Variables:
dnl comment-start: "dnl "
dnl comment-end: ""
dnl comment-start-skip: "\\bdnl\\b\\s *"
dnl compile-command: "autoconf"
dnl End:
